train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey --save-interval 10 --frames 80000

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=False, mem=False)

Device: cuda

Environments loaded

Training status loaded

Observations preprocessor loaded
Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (actor): Sequential(
    (0): Linear(in_features=64, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=64, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Optimizer loaded

U 1 | F 002048 | FPS 0640 | D 3 | rR:μσmM 0.09 0.23 0.00 0.73 | F:μσmM 11.1 29.6 0.0 101.0 | H 1.919 | V -0.095 | pL -0.027 | vL 0.007 | ∇ 0.056
U 2 | F 004096 | FPS 0957 | D 5 | rR:μσmM 0.15 0.23 0.00 0.64 | F:μσmM 218.6 53.6 101.0 250.0 | H 1.920 | V -0.061 | pL -0.035 | vL 0.003 | ∇ 0.026
U 3 | F 006144 | FPS 0974 | D 7 | rR:μσmM 0.08 0.17 0.00 0.62 | F:μσmM 235.4 36.9 105.0 250.0 | H 1.932 | V -0.054 | pL -0.010 | vL 0.000 | ∇ 0.009
